[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sai manikanta praneeth perala",
    "section": "",
    "text": "Am a skilled Systems Engineer at Infosys, specializing in the Testing Domain since September 2021. I holds a degree in Mechanical Engineering from Vasavi College of Engineering and has a strong academic background, including certifications in Renewable Energy and Thermodynamics. Apart from my professional endeavors,I have showcased my engineering prowess through a project on the “Design and Development of 3 Degrees of Freedom Delta Robot” during his undergraduate years."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "The provided R code loads the mtcars data set and conducts a linear regression analysis to predict miles per gallon (mpg) based on the independent variables of weight (wt), horsepower (hp), and quarter-mile time (qsec). The resulting regression model is stored in the variable model. The summary of the model, generated using the summary function, offers detailed information on coefficients, standard errors, t-values, and p-values, providing insights into the relationships between the predictor variables and the target variable. This summary aids in interpreting the significance of each predictor in explaining the variation in miles per gallon in the context of the dataset.\n\n\nCode\n# Load the mtcars dataset (if not already loaded)\ndata(mtcars)\n\n# Perform linear regression (e.g., predicting mpg based on other variables)\nmodel &lt;- lm(mpg ~ wt + hp + qsec, data = mtcars)\n\n# Display the summary of the regression model\nsummary(model)\n\n\n\nCall:\nlm(formula = mpg ~ wt + hp + qsec, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.8591 -1.6418 -0.4636  1.1940  5.6092 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 27.61053    8.41993   3.279  0.00278 ** \nwt          -4.35880    0.75270  -5.791 3.22e-06 ***\nhp          -0.01782    0.01498  -1.190  0.24418    \nqsec         0.51083    0.43922   1.163  0.25463    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.578 on 28 degrees of freedom\nMultiple R-squared:  0.8348,    Adjusted R-squared:  0.8171 \nF-statistic: 47.15 on 3 and 28 DF,  p-value: 4.506e-11\n\n\nThe linear regression analysis reveals a significant relationship between the predictor variables (weight, horsepower, and quarter-mile time) and the target variable (miles per gallon). The model suggests that weight has a substantial negative impact on mpg, while there is no statistically significant effect from horsepower and quarter-mile time. The overall model is highly significant (p-value: 4.506e-11) with a strong explanatory power (Adjusted R-squared: 0.8171), indicating that the chosen variables collectively account for a significant portion of the variance in miles per gallon in the mtcars dataset."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in my blog projects. Welcome!"
  },
  {
    "objectID": "index.html#bio",
    "href": "index.html#bio",
    "title": "Sai manikanta praneeth perala",
    "section": "",
    "text": "Am a skilled Systems Engineer at Infosys, specializing in the Testing Domain since September 2021. I holds a degree in Mechanical Engineering from Vasavi College of Engineering and has a strong academic background, including certifications in Renewable Energy and Thermodynamics. Apart from my professional endeavors,I have showcased my engineering prowess through a project on the “Design and Development of 3 Degrees of Freedom Delta Robot” during his undergraduate years."
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "",
    "section": "",
    "text": "Code"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Regression model using random forest\n\n\n\ncode\n\n\nanalysis\n\n\nmchine learning model\n\n\nR\n\n\n\n\n\n\n\nSai manikanta praneeth perala\n\n\nJan 6, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLinear regression analysis\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\nSai manikanta praneeth perala\n\n\nDec 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMachine learning model visualization\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\nplotly\n\n\nplot\n\n\n\n\n\n\n\nSai manikanta praneeth perala\n\n\nDec 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\nnews\n\n\n\n\n\n\n\nSai manikanta praneeth perala\n\n\nDec 3, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post with plot/index.html",
    "href": "posts/post with plot/index.html",
    "title": "Machine learning model visualization",
    "section": "",
    "text": "This R code utilizes ggplot2, corrplot, caret, and Metrics to analyze a synthetic dataset. It starts with summary statistics, visualizes relationships with scatter plots, and depicts correlations using a color-coded matrix. The main focus is on a linear regression model predicting ‘mpg’ based on ‘wt.’ The model’s summary and evaluation metrics, including RMSE, are provided. The ggplot2 package is then used to visualize the regression line on a scatter plot of ‘wt’ versus ‘mpg,’ offering a concise exploration of the dataset and the linear regression model.\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(corrplot)\n\ncorrplot 0.92 loaded\n\nlibrary(caret)\n\nLoading required package: lattice\n\nlibrary(Metrics)\n\nWarning: package 'Metrics' was built under R version 4.3.2\n\n\n\nAttaching package: 'Metrics'\n\n\nThe following objects are masked from 'package:caret':\n\n    precision, recall\n\n# Create a dataframe with random values\nset.seed(123)\nn &lt;- 100\nrandom_df &lt;- data.frame(\n  mpg = rnorm(n, mean = 25, sd = 5),\n  wt = rnorm(n, mean = 3, sd = 1),\n  disp = rnorm(n, mean = 200, sd = 50),\n  hp = rnorm(n, mean = 120, sd = 30)\n)\n\n# EDA: Summary statistics and structure of the dataset\nsummary(random_df)\n\n      mpg              wt              disp             hp        \n Min.   :13.45   Min.   :0.9468   Min.   :112.2   Min.   : 46.02  \n 1st Qu.:22.53   1st Qu.:2.1989   1st Qu.:173.4   1st Qu.: 98.12  \n Median :25.31   Median :2.7742   Median :201.8   Median :119.89  \n Mean   :25.45   Mean   :2.8925   Mean   :206.0   Mean   :118.91  \n 3rd Qu.:28.46   3rd Qu.:3.4678   3rd Qu.:238.2   3rd Qu.:140.66  \n Max.   :35.94   Max.   :6.2410   Max.   :314.7   Max.   :197.14  \n\nstr(random_df)\n\n'data.frame':   100 obs. of  4 variables:\n $ mpg : num  22.2 23.8 32.8 25.4 25.6 ...\n $ wt  : num  2.29 3.26 2.75 2.65 2.05 ...\n $ disp: num  310 266 187 227 179 ...\n $ hp  : num  98.5 97.4 91.8 88.4 106.9 ...\n\n# Scatter plots for selected relationships\npairs(random_df, col = \"#FFA500\")\n\n\n\n# Correlation matrix visualization\ncorrelation_matrix &lt;- cor(random_df)\ncorrplot(correlation_matrix, method = \"color\", col = colorRampPalette(c(\"#B2DF8A\", \"#1F78B4\"))(20))\n\n\n\n# Linear Regression Model\n# Assume mpg as the dependent variable and wt as the independent variable\nmodel &lt;- lm(mpg ~ wt, data = random_df)\n\n# Model summary\nsummary(model)\n\n\nCall:\nlm(formula = mpg ~ wt, data = random_df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-11.9575  -2.9785  -0.2153   2.9612  10.6502 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  26.1282     1.4516  18.000   &lt;2e-16 ***\nwt           -0.2338     0.4762  -0.491    0.625    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.582 on 98 degrees of freedom\nMultiple R-squared:  0.002453,  Adjusted R-squared:  -0.007726 \nF-statistic: 0.241 on 1 and 98 DF,  p-value: 0.6246\n\n# Predictions\npredictions &lt;- predict(model, random_df)\n\n# Model evaluation\nrmse_value &lt;- rmse(predictions, random_df$mpg)\ncat(\"Root Mean Squared Error (RMSE):\", rmse_value, \"\\n\")\n\nRoot Mean Squared Error (RMSE): 4.535627 \n\n# Visualization of the linear regression line\nggplot(random_df, aes(x = wt, y = mpg)) +\n  geom_point(color = \"#FFA500\", size = 3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"#E41A1C\", linetype = \"dashed\", size = 1.5) +\n  labs(title = \"Linear Regression: MPG vs Weight\",\n       x = \"Weight\", y = \"Miles per Gallon\") +\n  theme_minimal() +\n  theme(plot.title = element_text(color = \"#4DAF4A\", size = 16, face = \"bold\"),\n        axis.title.x = element_text(color = \"#377EB8\", size = 14),\n        axis.title.y = element_text(color = \"#FF7F00\", size = 14),\n        axis.text = element_text(color = \"#333333\", size = 12),\n        legend.position = \"none\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/post with code/index.html",
    "href": "posts/post with code/index.html",
    "title": "Linear regression analysis",
    "section": "",
    "text": "The R code generates a complex dataset, trains a decision tree, and a linear regression model. It then visualizes the models, displays their summaries, and provides alternative visualizations without using kableExtra.\n\n# Install and load necessary packages\nif (!requireNamespace(\"MASS\", quietly = TRUE)) {\n  install.packages(\"MASS\")\n}\nif (!requireNamespace(\"rpart\", quietly = TRUE)) {\n  install.packages(\"rpart\")\n}\nif (!requireNamespace(\"rpart.plot\", quietly = TRUE)) {\n  install.packages(\"rpart.plot\")\n}\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) {\n  install.packages(\"ggplot2\")\n}\nif (!requireNamespace(\"kableExtra\", quietly = TRUE)) {\n  install.packages(\"kableExtra\")\n}\nif (!requireNamespace(\"caret\", quietly = TRUE)) {\n  install.packages(\"caret\")\n}\n\nlibrary(MASS)\nlibrary(rpart)\nlibrary(rpart.plot)\n\nWarning: package 'rpart.plot' was built under R version 4.3.2\n\nlibrary(ggplot2)\nlibrary(kableExtra)\nlibrary(caret)\n\nLoading required package: lattice\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Function to generate complex data\ngenerate_complex_data &lt;- function(n) {\n  mu &lt;- rep(0, 5)\n  Sigma &lt;- matrix(0.7, nrow = 5, ncol = 5)\n  diag(Sigma) &lt;- 1\n  data &lt;- mvrnorm(n, mu, Sigma)\n  data &lt;- as.data.frame(data)\n  names(data) &lt;- c(\"X1\", \"X2\", \"X3\", \"X4\", \"Y\")\n  data$Y &lt;- 2*sin(data$X1) + 3*log(1 + exp(data$X2)) + rnorm(n)\n  return(data)\n}\n\n# Generate complex data\ndata &lt;- generate_complex_data(300)\n\n# Split the dataset into training and testing sets\ntrain_index &lt;- createDataPartition(data$Y, p = 0.8, list = FALSE)\ntrain_data &lt;- data[train_index, ]\ntest_data &lt;- data[-train_index, ]\n\n# Decision tree model\ntree_model &lt;- rpart(Y ~ ., data = train_data, method = \"anova\")\n\n# Linear regression model\nlinear_model &lt;- lm(Y ~ ., data = train_data)\n\n# Visualize decision tree\nrpart.plot(tree_model, main = \"Decision Tree Model\", extra = 101, under = TRUE, compress = TRUE)\n\n\n\n# Visualize linear regression\nggplot(train_data, aes(x = Y, y = predict(linear_model))) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"red\") +\n  ggtitle(\"Linear Regression Model\")\n\n\n\n# Display decision tree model summary using kableExtra\ntree_summary &lt;- summary(tree_model)\n\nCall:\nrpart(formula = Y ~ ., data = train_data, method = \"anova\")\n  n= 240 \n\n          CP nsplit rel error    xerror       xstd\n1 0.54997276      0 1.0000000 1.0057093 0.07513055\n2 0.17981516      1 0.4500272 0.5183794 0.04043374\n3 0.03312631      2 0.2702121 0.3261017 0.02839097\n4 0.03075679      3 0.2370858 0.3057193 0.02639404\n5 0.02067114      4 0.2063290 0.2473445 0.02244488\n6 0.01987992      5 0.1856578 0.2499782 0.02174300\n7 0.01193845      6 0.1657779 0.2357704 0.02084311\n8 0.01000000      7 0.1538395 0.2310490 0.02059688\n\nVariable importance\nX1 X2 X3 X4 \n39 28 17 16 \n\nNode number 1: 240 observations,    complexity param=0.5499728\n  mean=2.460614, MSE=7.621179 \n  left son=2 (96 obs) right son=3 (144 obs)\n  Primary splits:\n      X1 &lt; -0.1520619  to the left,  improve=0.5499728, (0 missing)\n      X2 &lt; 0.5711715   to the left,  improve=0.5159892, (0 missing)\n      X3 &lt; 0.1208541   to the left,  improve=0.2968321, (0 missing)\n      X4 &lt; -0.07148916 to the left,  improve=0.2886611, (0 missing)\n  Surrogate splits:\n      X2 &lt; -0.3762551  to the left,  agree=0.779, adj=0.448, (0 split)\n      X3 &lt; -0.2387109  to the left,  agree=0.758, adj=0.396, (0 split)\n      X4 &lt; -0.3551359  to the left,  agree=0.754, adj=0.385, (0 split)\n\nNode number 2: 96 observations,    complexity param=0.03075679\n  mean=-0.04680701, MSE=1.833011 \n  left son=4 (67 obs) right son=5 (29 obs)\n  Primary splits:\n      X2 &lt; -0.2476466  to the left,  improve=0.3196967, (0 missing)\n      X1 &lt; -0.8322406  to the left,  improve=0.2236104, (0 missing)\n      X4 &lt; -0.4008152  to the left,  improve=0.1813125, (0 missing)\n      X3 &lt; -0.904785   to the left,  improve=0.1080443, (0 missing)\n  Surrogate splits:\n      X3 &lt; 0.2833611   to the left,  agree=0.781, adj=0.276, (0 split)\n      X1 &lt; -0.3992759  to the left,  agree=0.760, adj=0.207, (0 split)\n      X4 &lt; -0.09476738 to the left,  agree=0.750, adj=0.172, (0 split)\n\nNode number 3: 144 observations,    complexity param=0.1798152\n  mean=4.132228, MSE=4.494223 \n  left son=6 (86 obs) right son=7 (58 obs)\n  Primary splits:\n      X2 &lt; 0.7020045   to the left,  improve=0.5082093, (0 missing)\n      X1 &lt; 0.5961358   to the left,  improve=0.4199056, (0 missing)\n      X3 &lt; 1.187476    to the left,  improve=0.2117912, (0 missing)\n      X4 &lt; 0.7281971   to the left,  improve=0.1454059, (0 missing)\n  Surrogate splits:\n      X1 &lt; 0.5961358   to the left,  agree=0.722, adj=0.310, (0 split)\n      X3 &lt; 1.00385     to the left,  agree=0.722, adj=0.310, (0 split)\n      X4 &lt; 0.7281971   to the left,  agree=0.708, adj=0.276, (0 split)\n\nNode number 4: 67 observations\n  mean=-0.5504389, MSE=1.339999 \n\nNode number 5: 29 observations\n  mean=1.116756, MSE=1.032152 \n\nNode number 6: 86 observations,    complexity param=0.02067114\n  mean=2.89111, MSE=1.984277 \n  left son=12 (66 obs) right son=13 (20 obs)\n  Primary splits:\n      X1 &lt; 0.6788651   to the left,  improve=0.22156300, (0 missing)\n      X2 &lt; -0.6461858  to the left,  improve=0.18349230, (0 missing)\n      X3 &lt; 0.3337678   to the left,  improve=0.07177039, (0 missing)\n      X4 &lt; -0.6901304  to the left,  improve=0.07147937, (0 missing)\n  Surrogate splits:\n      X3 &lt; 1.306227    to the left,  agree=0.791, adj=0.1, (0 split)\n\nNode number 7: 58 observations,    complexity param=0.03312631\n  mean=5.972508, MSE=2.545232 \n  left son=14 (19 obs) right son=15 (39 obs)\n  Primary splits:\n      X1 &lt; 0.5487777   to the left,  improve=0.4104414, (0 missing)\n      X2 &lt; 1.284502    to the left,  improve=0.3764514, (0 missing)\n      X3 &lt; 0.64023     to the left,  improve=0.1446203, (0 missing)\n      X4 &lt; 0.5195383   to the left,  improve=0.1065470, (0 missing)\n  Surrogate splits:\n      X4 &lt; 0.1602244   to the left,  agree=0.759, adj=0.263, (0 split)\n      X3 &lt; -0.4101765  to the left,  agree=0.707, adj=0.105, (0 split)\n\nNode number 12: 66 observations,    complexity param=0.01987992\n  mean=2.52611, MSE=1.634518 \n  left son=24 (37 obs) right son=25 (29 obs)\n  Primary splits:\n      X2 &lt; 0.1420471   to the left,  improve=0.33706550, (0 missing)\n      X3 &lt; 0.7950633   to the left,  improve=0.07418237, (0 missing)\n      X4 &lt; -0.7620964  to the left,  improve=0.07367549, (0 missing)\n      X1 &lt; 0.202155    to the left,  improve=0.06774626, (0 missing)\n  Surrogate splits:\n      X3 &lt; -0.07669569 to the left,  agree=0.652, adj=0.207, (0 split)\n      X1 &lt; -0.03456467 to the right, agree=0.591, adj=0.069, (0 split)\n      X4 &lt; 0.7481645   to the left,  agree=0.576, adj=0.034, (0 split)\n\nNode number 13: 20 observations\n  mean=4.095609, MSE=1.248018 \n\nNode number 14: 19 observations\n  mean=4.508159, MSE=1.691793 \n\nNode number 15: 39 observations,    complexity param=0.01193845\n  mean=6.685909, MSE=1.4074 \n  left son=30 (11 obs) right son=31 (28 obs)\n  Primary splits:\n      X2 &lt; 0.9883665   to the left,  improve=0.39783150, (0 missing)\n      X1 &lt; 1.190038    to the left,  improve=0.18917110, (0 missing)\n      X3 &lt; 0.4410145   to the left,  improve=0.14366120, (0 missing)\n      X4 &lt; 0.7637458   to the right, improve=0.02763798, (0 missing)\n  Surrogate splits:\n      X3 &lt; 0.1215273   to the left,  agree=0.795, adj=0.273, (0 split)\n      X4 &lt; 1.665356    to the right, agree=0.744, adj=0.091, (0 split)\n\nNode number 24: 37 observations\n  mean=1.868981, MSE=1.091084 \n\nNode number 25: 29 observations\n  mean=3.364515, MSE=1.074002 \n\nNode number 30: 11 observations\n  mean=5.492083, MSE=0.8445061 \n\nNode number 31: 28 observations\n  mean=7.154912, MSE=0.8486653 \n\n# Display linear regression model summary using kableExtra\nlinear_summary &lt;- summary(linear_model)\n\n# Display decision tree model summary\ntree_summary &lt;- summary(tree_model)\n\nCall:\nrpart(formula = Y ~ ., data = train_data, method = \"anova\")\n  n= 240 \n\n          CP nsplit rel error    xerror       xstd\n1 0.54997276      0 1.0000000 1.0057093 0.07513055\n2 0.17981516      1 0.4500272 0.5183794 0.04043374\n3 0.03312631      2 0.2702121 0.3261017 0.02839097\n4 0.03075679      3 0.2370858 0.3057193 0.02639404\n5 0.02067114      4 0.2063290 0.2473445 0.02244488\n6 0.01987992      5 0.1856578 0.2499782 0.02174300\n7 0.01193845      6 0.1657779 0.2357704 0.02084311\n8 0.01000000      7 0.1538395 0.2310490 0.02059688\n\nVariable importance\nX1 X2 X3 X4 \n39 28 17 16 \n\nNode number 1: 240 observations,    complexity param=0.5499728\n  mean=2.460614, MSE=7.621179 \n  left son=2 (96 obs) right son=3 (144 obs)\n  Primary splits:\n      X1 &lt; -0.1520619  to the left,  improve=0.5499728, (0 missing)\n      X2 &lt; 0.5711715   to the left,  improve=0.5159892, (0 missing)\n      X3 &lt; 0.1208541   to the left,  improve=0.2968321, (0 missing)\n      X4 &lt; -0.07148916 to the left,  improve=0.2886611, (0 missing)\n  Surrogate splits:\n      X2 &lt; -0.3762551  to the left,  agree=0.779, adj=0.448, (0 split)\n      X3 &lt; -0.2387109  to the left,  agree=0.758, adj=0.396, (0 split)\n      X4 &lt; -0.3551359  to the left,  agree=0.754, adj=0.385, (0 split)\n\nNode number 2: 96 observations,    complexity param=0.03075679\n  mean=-0.04680701, MSE=1.833011 \n  left son=4 (67 obs) right son=5 (29 obs)\n  Primary splits:\n      X2 &lt; -0.2476466  to the left,  improve=0.3196967, (0 missing)\n      X1 &lt; -0.8322406  to the left,  improve=0.2236104, (0 missing)\n      X4 &lt; -0.4008152  to the left,  improve=0.1813125, (0 missing)\n      X3 &lt; -0.904785   to the left,  improve=0.1080443, (0 missing)\n  Surrogate splits:\n      X3 &lt; 0.2833611   to the left,  agree=0.781, adj=0.276, (0 split)\n      X1 &lt; -0.3992759  to the left,  agree=0.760, adj=0.207, (0 split)\n      X4 &lt; -0.09476738 to the left,  agree=0.750, adj=0.172, (0 split)\n\nNode number 3: 144 observations,    complexity param=0.1798152\n  mean=4.132228, MSE=4.494223 \n  left son=6 (86 obs) right son=7 (58 obs)\n  Primary splits:\n      X2 &lt; 0.7020045   to the left,  improve=0.5082093, (0 missing)\n      X1 &lt; 0.5961358   to the left,  improve=0.4199056, (0 missing)\n      X3 &lt; 1.187476    to the left,  improve=0.2117912, (0 missing)\n      X4 &lt; 0.7281971   to the left,  improve=0.1454059, (0 missing)\n  Surrogate splits:\n      X1 &lt; 0.5961358   to the left,  agree=0.722, adj=0.310, (0 split)\n      X3 &lt; 1.00385     to the left,  agree=0.722, adj=0.310, (0 split)\n      X4 &lt; 0.7281971   to the left,  agree=0.708, adj=0.276, (0 split)\n\nNode number 4: 67 observations\n  mean=-0.5504389, MSE=1.339999 \n\nNode number 5: 29 observations\n  mean=1.116756, MSE=1.032152 \n\nNode number 6: 86 observations,    complexity param=0.02067114\n  mean=2.89111, MSE=1.984277 \n  left son=12 (66 obs) right son=13 (20 obs)\n  Primary splits:\n      X1 &lt; 0.6788651   to the left,  improve=0.22156300, (0 missing)\n      X2 &lt; -0.6461858  to the left,  improve=0.18349230, (0 missing)\n      X3 &lt; 0.3337678   to the left,  improve=0.07177039, (0 missing)\n      X4 &lt; -0.6901304  to the left,  improve=0.07147937, (0 missing)\n  Surrogate splits:\n      X3 &lt; 1.306227    to the left,  agree=0.791, adj=0.1, (0 split)\n\nNode number 7: 58 observations,    complexity param=0.03312631\n  mean=5.972508, MSE=2.545232 \n  left son=14 (19 obs) right son=15 (39 obs)\n  Primary splits:\n      X1 &lt; 0.5487777   to the left,  improve=0.4104414, (0 missing)\n      X2 &lt; 1.284502    to the left,  improve=0.3764514, (0 missing)\n      X3 &lt; 0.64023     to the left,  improve=0.1446203, (0 missing)\n      X4 &lt; 0.5195383   to the left,  improve=0.1065470, (0 missing)\n  Surrogate splits:\n      X4 &lt; 0.1602244   to the left,  agree=0.759, adj=0.263, (0 split)\n      X3 &lt; -0.4101765  to the left,  agree=0.707, adj=0.105, (0 split)\n\nNode number 12: 66 observations,    complexity param=0.01987992\n  mean=2.52611, MSE=1.634518 \n  left son=24 (37 obs) right son=25 (29 obs)\n  Primary splits:\n      X2 &lt; 0.1420471   to the left,  improve=0.33706550, (0 missing)\n      X3 &lt; 0.7950633   to the left,  improve=0.07418237, (0 missing)\n      X4 &lt; -0.7620964  to the left,  improve=0.07367549, (0 missing)\n      X1 &lt; 0.202155    to the left,  improve=0.06774626, (0 missing)\n  Surrogate splits:\n      X3 &lt; -0.07669569 to the left,  agree=0.652, adj=0.207, (0 split)\n      X1 &lt; -0.03456467 to the right, agree=0.591, adj=0.069, (0 split)\n      X4 &lt; 0.7481645   to the left,  agree=0.576, adj=0.034, (0 split)\n\nNode number 13: 20 observations\n  mean=4.095609, MSE=1.248018 \n\nNode number 14: 19 observations\n  mean=4.508159, MSE=1.691793 \n\nNode number 15: 39 observations,    complexity param=0.01193845\n  mean=6.685909, MSE=1.4074 \n  left son=30 (11 obs) right son=31 (28 obs)\n  Primary splits:\n      X2 &lt; 0.9883665   to the left,  improve=0.39783150, (0 missing)\n      X1 &lt; 1.190038    to the left,  improve=0.18917110, (0 missing)\n      X3 &lt; 0.4410145   to the left,  improve=0.14366120, (0 missing)\n      X4 &lt; 0.7637458   to the right, improve=0.02763798, (0 missing)\n  Surrogate splits:\n      X3 &lt; 0.1215273   to the left,  agree=0.795, adj=0.273, (0 split)\n      X4 &lt; 1.665356    to the right, agree=0.744, adj=0.091, (0 split)\n\nNode number 24: 37 observations\n  mean=1.868981, MSE=1.091084 \n\nNode number 25: 29 observations\n  mean=3.364515, MSE=1.074002 \n\nNode number 30: 11 observations\n  mean=5.492083, MSE=0.8445061 \n\nNode number 31: 28 observations\n  mean=7.154912, MSE=0.8486653 \n\nprint(\"Decision Tree Model Summary:\")\n\n[1] \"Decision Tree Model Summary:\"\n\nprint(tree_summary$splits)\n\n   count ncat    improve       index        adj\nX1   240   -1 0.54997276 -0.15206190 0.00000000\nX2   240   -1 0.51598924  0.57117154 0.00000000\nX3   240   -1 0.29683212  0.12085413 0.00000000\nX4   240   -1 0.28866113 -0.07148916 0.00000000\nX2     0   -1 0.77916667 -0.37625507 0.44791667\nX3     0   -1 0.75833333 -0.23871092 0.39583333\nX4     0   -1 0.75416667 -0.35513593 0.38541667\nX2    96   -1 0.31969666 -0.24764657 0.00000000\nX1    96   -1 0.22361036 -0.83224062 0.00000000\nX4    96   -1 0.18131247 -0.40081515 0.00000000\nX3    96   -1 0.10804433 -0.90478499 0.00000000\nX3     0   -1 0.78125000  0.28336110 0.27586207\nX1     0   -1 0.76041667 -0.39927594 0.20689655\nX4     0   -1 0.75000000 -0.09476738 0.17241379\nX2   144   -1 0.50820930  0.70200451 0.00000000\nX1   144   -1 0.41990565  0.59613581 0.00000000\nX3   144   -1 0.21179123  1.18747565 0.00000000\nX4   144   -1 0.14540589  0.72819711 0.00000000\nX1     0   -1 0.72222222  0.59613581 0.31034483\nX3     0   -1 0.72222222  1.00385016 0.31034483\nX4     0   -1 0.70833333  0.72819711 0.27586207\nX1    86   -1 0.22156296  0.67886512 0.00000000\nX2    86   -1 0.18349234 -0.64618584 0.00000000\nX3    86   -1 0.07177039  0.33376782 0.00000000\nX4    86   -1 0.07147937 -0.69013038 0.00000000\nX3     0   -1 0.79069767  1.30622740 0.10000000\nX2    66   -1 0.33706547  0.14204707 0.00000000\nX3    66   -1 0.07418237  0.79506334 0.00000000\nX4    66   -1 0.07367549 -0.76209643 0.00000000\nX1    66   -1 0.06774626  0.20215498 0.00000000\nX3     0   -1 0.65151515 -0.07669569 0.20689655\nX1     0    1 0.59090909 -0.03456467 0.06896552\nX4     0   -1 0.57575758  0.74816451 0.03448276\nX1    58   -1 0.41044136  0.54877770 0.00000000\nX2    58   -1 0.37645141  1.28450238 0.00000000\nX3    58   -1 0.14462033  0.64023004 0.00000000\nX4    58   -1 0.10654699  0.51953834 0.00000000\nX4     0   -1 0.75862069  0.16022443 0.26315789\nX3     0   -1 0.70689655 -0.41017654 0.10526316\nX2    39   -1 0.39783153  0.98836651 0.00000000\nX1    39   -1 0.18917108  1.19003822 0.00000000\nX3    39   -1 0.14366117  0.44101446 0.00000000\nX4    39    1 0.02763798  0.76374584 0.00000000\nX3     0   -1 0.79487179  0.12152733 0.27272727\nX4     0    1 0.74358974  1.66535587 0.09090909\n\n# Display linear regression model summary\nlinear_summary &lt;- summary(linear_model)\nprint(\"\\nLinear Regression Model Summary:\")\n\n[1] \"\\nLinear Regression Model Summary:\"\n\nprint(linear_summary)\n\n\nCall:\nlm(formula = Y ~ ., data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.5444 -0.8216 -0.0462  0.7647  4.9136 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  2.51934    0.08004  31.476   &lt;2e-16 ***\nX1           1.46213    0.13025  11.225   &lt;2e-16 ***\nX2           1.40304    0.12716  11.034   &lt;2e-16 ***\nX3           0.04054    0.12353   0.328    0.743    \nX4          -0.07251    0.12161  -0.596    0.552    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.239 on 235 degrees of freedom\nMultiple R-squared:  0.8028,    Adjusted R-squared:  0.7995 \nF-statistic: 239.2 on 4 and 235 DF,  p-value: &lt; 2.2e-16\n\n# Visualization of decision tree\nplot(tree_model, uniform = TRUE, main = \"Decision Tree Model\")\n\n\n\n# Visualization of linear regression\npar(mfrow = c(1, 1))  # Reset the plotting layout\nplot(train_data$Y, predict(linear_model), main = \"Linear Regression Model\",\n     xlab = \"Actual Y\", ylab = \"Predicted Y\")\nabline(a = 0, b = 1, col = \"red\", lty = 2)\n\n\n\n\nThe linear regression model results indicate a strong fit to the data with a high adjusted R-squared value of 0.7995, suggesting that approximately 79.95% of the variability in the response variable (Y) is explained by the predictor variables (X1, X2, X3, X4). Notably, X1 and X2 demonstrate significant positive coefficients (1.46213 and 1.40304, respectively), indicating their substantial impact on the response. However, the coefficients for X3 and X4 are not statistically significant based on their p-values (0.743 and 0.552, respectively), suggesting a potential lack of influence. The overall model is highly significant (p-value &lt; 2.2e-16), emphasizing its effectiveness in capturing the relationships within the data."
  },
  {
    "objectID": "posts/final project/index.html",
    "href": "posts/final project/index.html",
    "title": "Regression model using random forest",
    "section": "",
    "text": "Random Forest\nThe R code demonstrates the construction of a random forest classification model using a synthetic dataset with two features (X1 and X2) and a binary target variable (Y). The model is trained on 80% of the data and tested on the remaining 20%. The random forest consists of 100 trees. ## INTRODUCTION\nThe model accuracy is then evaluated on the test set, yielding an accuracy of 0.5. An accuracy of 0.5 suggests that the model is performing no better than random chance in predicting the binary outcome. In this case, the model is not effectively capturing the underlying patterns in the data, and further exploration, feature engineering, or parameter tuning may be necessary to improve its performance. The scatter plot visually represents the data points and their classification, where the black points correspond to the instances in the test set. The lack of clear separation in the plot indicates the model’s struggle in distinguishing between the two classes based on the given features.\n\n# Load required libraries\nlibrary(randomForest)\n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\nlibrary(ggplot2)\n\n\nAttaching package: 'ggplot2'\n\n\nThe following object is masked from 'package:randomForest':\n\n    margin\n\n# Set a seed for reproducibility\nset.seed(123)\n\n# Generate a random dataset with two features (X1 and X2) and a binary target variable (Y)\nn &lt;- 100\ndata &lt;- data.frame(\n  X1 = rnorm(n),\n  X2 = rnorm(n),\n  Y = factor(sample(0:1, n, replace = TRUE))\n)\n\n# Split the dataset into training and testing sets\ntrain_indices &lt;- sample(1:n, 0.8 * n)\ntrain_data &lt;- data[train_indices, ]\ntest_data &lt;- data[-train_indices, ]\n\n# Train a random forest model\nrf_model &lt;- randomForest(Y ~ X1 + X2, data = train_data, ntree = 100)\n\n# Make predictions on the test set\npredictions &lt;- predict(rf_model, newdata = test_data)\n\n# Evaluate model accuracy\naccuracy &lt;- mean(predictions == test_data$Y)\ncat(\"Model Accuracy:\", accuracy, \"\\n\")\n\nModel Accuracy: 0.5 \n\n# Visualize the random forest results\n# Since we have two features, we can create a scatter plot\nggplot(data, aes(x = X1, y = X2, color = Y)) +\n  geom_point() +\n  geom_point(data = test_data, aes(x = X1, y = X2), color = \"black\", size = 3, alpha = 0.5) +\n  ggtitle(\"Random Forest Classification\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/final project/index.html#how-to-read-the-data",
    "href": "posts/final project/index.html#how-to-read-the-data",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "The first row in NFLX data set: On 09‐Aug-2002 (ANNDATS), analyst 6749 (ANALYS) at Estimator 1872 (ESTIMATOR) predicts that the EPS (MEASURE) for NETFLIX INC. (CNAME) with a ticker of NFLX (TICKER) with forecast period ending 30‐Sep-2002 (FPEDATS) is -$0.0086 (VALUE). This estimates was entered into the database on 12‐Aug-2002 (ACTDATS). On 17-Oct-2002 (ANNDATS_ACT), NETFLIX INC. announced an actual EPS of $7e-04 ($0.0007) (ACTUAL) for this quarter (FPI=6).\n\n\nCode\nhead(NFLX,n=1)\n\n\n  TICKER        CNAME  ACTDATS ESTIMATOR ANALYS FPI MEASURE   VALUE  FPEDATS\n1   NFLX NETFLIX INC. 20020812      1872   6749   6     EPS -0.0086 20020930\n   REVDATS  REVTIMS  ANNDATS  ANNTIMS ACTUAL ANNDATS_ACT ANNTIMS_ACT\n1 20021018 17:02:56 20020809 14:00:00 -7e-04    20021017    17:04:00"
  },
  {
    "objectID": "posts/final project/index.html#your-turn",
    "href": "posts/final project/index.html#your-turn",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Task 1A: Calculate Missingness\n\n\n\nCheck to see the missing values in NFLX dataset and calculate the percent missing for each variable in NFLX and list your findings in R object called NFLX_missingness. NFLX_missingness is a dataframe with two columns: The first column, Variable, stores the variable names and the second column, Missingness shows the percent missing in percentage points with two decimal points."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-1a",
    "href": "posts/final project/index.html#your-code-for-task-1a",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Read CSV file\nNFLX &lt;- fread(\"C:/Users/HP/Downloads/NFLX.csv\")\n\n# Calculate missingness manually\nmissingness_percentages &lt;- colMeans(is.na(NFLX)) * 100\n\n# Create a data frame with Variable names and MissingPercentage values\nmissing_data &lt;- data.frame(Variable = names(missingness_percentages), MissingPercentage = missingness_percentages)\n\n# Print missingness percentages\nprint(\"Missing Values Percentage by Variable\")\n\n\n[1] \"Missing Values Percentage by Variable\"\n\n\nCode\nprint(missing_data)\n\n\n               Variable MissingPercentage\nTICKER           TICKER          0.000000\nCNAME             CNAME          0.000000\nACTDATS         ACTDATS          0.000000\nESTIMATOR     ESTIMATOR          0.000000\nANALYS           ANALYS          0.000000\nFPI                 FPI          0.000000\nMEASURE         MEASURE          0.000000\nVALUE             VALUE          0.000000\nFPEDATS         FPEDATS          0.000000\nREVDATS         REVDATS          0.000000\nREVTIMS         REVTIMS          0.000000\nANNDATS         ANNDATS          0.000000\nANNTIMS         ANNTIMS          0.000000\nACTUAL           ACTUAL          4.115304\nANNDATS_ACT ANNDATS_ACT          4.115304\nANNTIMS_ACT ANNTIMS_ACT          0.000000\n\n\nCode\n# Visualize missing values with custom color\nmissingness_plot &lt;- function(data) {\n  ggplot(data, aes(x = reorder(Variable, -MissingPercentage), y = MissingPercentage)) +\n    geom_bar(stat = \"identity\", fill = \"#66c2a5\") +  # Custom color: greenish\n    labs(title = \"Missing Values Percentage by Variable\", \n         x = \"Variable\", y = \"Missing Percentage\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n}\n\n# Generate and display missing values plot\nmissingness_plot(missing_data)\n\n\n\n\n\n\n\n\n\n\n\nTask 1B: Data Manipulation\n\n\n\nConduct the following data manipulations on NFLX:\n\nDrop rows from the data set when a variable has a missing value\nDrop rows from the data set the quarterly forecasts (drop FPI=6)\nDeclare TICKER, CNAME, ESTIMATOR , ANALYS, FPI , and MEASURE variables as factor\nDeclare ACTDATS, FPEDATS , ANNDATS, REVDATS, ANNDATS_ACT as time variable.\nDrop ANNTIMS_ACT, ANNTIMS , and REVTIMS\nCreate a new column named YEAR that captures the year in FPEDATS\nName your reduced dataset as NFLX1\nPrint out data structure and the summary of NFLX1"
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-1b",
    "href": "posts/final project/index.html#your-code-for-task-1b",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Copy NFLX to NFLX1 without assigning data types\nNFLX1 &lt;- NFLX\n\n# Drop rows from the data set when a variable has a missing value\nNFLX1 &lt;- NFLX1 %&gt;% na.omit()\n\n# Drop rows from the data set where FPI=6\nNFLX1 &lt;- NFLX1 %&gt;% filter(FPI != 6)\n\n# Drop ANNTIMS_ACT, ANNTIMS, and REVTIMS\nNFLX1 &lt;- NFLX1 %&gt;% select(-ANNTIMS_ACT, -ANNTIMS, -REVTIMS)\n\n# Create a new column named YEAR that is an exact copy of the data in FPEDATS\nNFLX1 &lt;- NFLX1 %&gt;% mutate(YEAR = FPEDATS)\n\n# Print out data structure and the summary of NFLX1\nstr(NFLX1)\n\n\nClasses 'data.table' and 'data.frame':  2603 obs. of  14 variables:\n $ TICKER     : chr  \"NFLX\" \"NFLX\" \"NFLX\" \"NFLX\" ...\n $ CNAME      : chr  \"NETFLIX INC.\" \"NETFLIX INC.\" \"NETFLIX INC.\" \"NETFLIX INC.\" ...\n $ ACTDATS    : int  20020805 20021202 20021202 20021202 20021205 20030106 20030115 20030116 20030121 20030314 ...\n $ ESTIMATOR  : int  183 2178 1872 220 2178 1872 2227 220 1872 481 ...\n $ ANALYS     : int  79868 80485 6749 57596 80485 6749 82629 57596 6749 81599 ...\n $ FPI        : int  1 1 1 1 1 1 1 1 1 1 ...\n $ MEASURE    : chr  \"EPS\" \"EPS\" \"EPS\" \"EPS\" ...\n $ VALUE      : num  -0.025 -0.0321 -0.0207 -0.0179 -0.0286 -0.0136 -0.0164 -0.0071 0.0107 0.0129 ...\n $ FPEDATS    : int  20021231 20021231 20021231 20021231 20021231 20021231 20021231 20031231 20031231 20031231 ...\n $ REVDATS    : int  20021129 20021202 20021202 20021206 20021205 20030114 20030115 20030417 20030402 20030409 ...\n $ ANNDATS    : int  20020805 20021202 20021202 20021202 20021204 20030102 20030115 20030116 20030116 20030314 ...\n $ ACTUAL     : num  -0.005 -0.005 -0.005 -0.005 -0.005 -0.005 -0.005 0.0393 0.0393 0.0393 ...\n $ ANNDATS_ACT: int  20030115 20030115 20030115 20030115 20030115 20030115 20030115 20040121 20040121 20040121 ...\n $ YEAR       : int  20021231 20021231 20021231 20021231 20021231 20021231 20021231 20031231 20031231 20031231 ...\n - attr(*, \".internal.selfref\")=&lt;externalptr&gt; \n\n\nCode\nsummary(NFLX1)\n\n\n    TICKER             CNAME              ACTDATS           ESTIMATOR   \n Length:2603        Length:2603        Min.   :20020805   Min.   :  11  \n Class :character   Class :character   1st Qu.:20101021   1st Qu.: 192  \n Mode  :character   Mode  :character   Median :20141009   Median : 899  \n                                       Mean   :20136831   Mean   :1376  \n                                       3rd Qu.:20180122   3rd Qu.:2502  \n                                       Max.   :20210119   Max.   :4439  \n     ANALYS            FPI      MEASURE              VALUE       \n Min.   :  1047   Min.   :1   Length:2603        Min.   :-0.150  \n 1st Qu.: 71755   1st Qu.:1   Class :character   1st Qu.: 0.190  \n Median : 82010   Median :1   Mode  :character   Median : 0.430  \n Mean   : 89534   Mean   :1                      Mean   : 1.339  \n 3rd Qu.:114459   3rd Qu.:1                      3rd Qu.: 2.015  \n Max.   :194536   Max.   :1                      Max.   : 7.670  \n    FPEDATS            REVDATS            ANNDATS             ACTUAL      \n Min.   :20021231   Min.   :20021129   Min.   :20020805   Min.   :-0.005  \n 1st Qu.:20101231   1st Qu.:20110120   1st Qu.:20101021   1st Qu.: 0.250  \n Median :20141231   Median :20141013   Median :20141009   Median : 0.430  \n Mean   :20137082   Mean   :20137740   Mean   :20136830   Mean   : 1.384  \n 3rd Qu.:20181231   3rd Qu.:20180122   3rd Qu.:20180122   3rd Qu.: 2.680  \n Max.   :20201231   Max.   :20210119   Max.   :20210119   Max.   : 6.080  \n  ANNDATS_ACT            YEAR         \n Min.   :20030115   Min.   :20021231  \n 1st Qu.:20110126   1st Qu.:20101231  \n Median :20150120   Median :20141231  \n Mean   :20145973   Mean   :20137082  \n 3rd Qu.:20190117   3rd Qu.:20181231  \n Max.   :20210119   Max.   :20201231  \n\n\n\n\n\n\n\n\nTask 2: Calculate Number of Analysts and Brokerage Houses\n\n\n\n\nCalculate the total number of unique analysts in NFLX1 dataset that provide forecasts each year and name your R object as NumberAnalyst\nCalculate the total number of unique brokerage houses (ESTIMATOR) in NFLX1 dataset that provide forecasts each year and name your R object as NumberBrokerage\nNeed Written Response in this callout: In which year(s) we have the highest number of unique analysts providing forecasts for NFLX ticker? In which year(s), we have the highest number of unique brokerage houses providing forecasts for the NFLX ticker.\n\n2020 is the year December 31 is the month which had the most unique number of analyst providing forecast for NTFLX."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-2",
    "href": "posts/final project/index.html#your-code-for-task-2",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Create a new column named YEAR\nNFLX1[, YEAR := format(FPEDATS)]\n\n# Calculate unique analysts each year\nNumberAnalyst &lt;- NFLX1[, .(NumAnalysts = uniqueN(ANALYS)), by = YEAR]\n\n# Print NumberAnalyst object\nprint(NumberAnalyst)\n\n\n        YEAR NumAnalysts\n 1: 20021231           5\n 2: 20031231           9\n 3: 20041231          19\n 4: 20051231          17\n 5: 20061231          20\n 6: 20071231          20\n 7: 20081231          20\n 8: 20091231          33\n 9: 20101231          37\n10: 20111231          40\n11: 20121231          38\n12: 20131231          42\n13: 20141231          45\n14: 20151231          47\n15: 20161231          46\n16: 20171231          48\n17: 20181231          56\n18: 20191231          46\n19: 20201231          49\n\n\nCode\n# Calculate unique brokerage houses each year\nNumberBrokerage &lt;- NFLX1[, .(NumBrokerage = uniqueN(ESTIMATOR)), by = YEAR]\n\n# Print NumberBrokerage object\nprint(NumberBrokerage)\n\n\n        YEAR NumBrokerage\n 1: 20021231            5\n 2: 20031231            8\n 3: 20041231           18\n 4: 20051231           17\n 5: 20061231           19\n 6: 20071231           18\n 7: 20081231           21\n 8: 20091231           32\n 9: 20101231           38\n10: 20111231           35\n11: 20121231           36\n12: 20131231           43\n13: 20141231           40\n14: 20151231           46\n15: 20161231           45\n16: 20171231           49\n17: 20181231           54\n18: 20191231           43\n19: 20201231           44\n\n\n\n\n\n\n\n\nTask 3: Get the most recent forecast in each year\n\n\n\n\nIt is quite possible that an analyst makes multiple forecasts throughout the year for the same fiscal period. Remove observations from NFLX1 if an analyst has multiple predictions for the same year and keep the last one (the most recent forecast for each year). Name your new dataset as NFLX2. This step is crucial for successful execution of the following tasks. Print the dimension of NFLX2.\nCheck your work: If your NFLX2 dataset has 641 rows and 14 columns, then you are on the right track. If not, please seek help!"
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-3",
    "href": "posts/final project/index.html#your-code-for-task-3",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Task 3: Get the most recent forecast in each year\n# Get most recent forecasts\nNFLX2 &lt;- NFLX1 %&gt;%\n    group_by(ANALYS, YEAR) %&gt;%\n    filter(REVDATS == max(REVDATS)) %&gt;%\n    ungroup()\n\n# Get dimensions\ndim(NFLX2)\n\n\n[1] 641  14\n\n\n\n\n\n\n\n\n\n\nTask 4: Calculate past accuracy\n\n\n\n\nCreate a copy of NFLX2 and call it NFLX3\nFor every year within the dataset NFLX3, compute the forecasting performance of each analyst for the current year and store the results in a new column labeled accuracy. In the calculation of forecast performance, you can use the VALUE-ACTUAL as the forecast accuracy measure.\nFor each year in the NFLX3 dataset, compute the forecasting performance of each analyst from the previous year and store the results in a new column called past_accuracy\nAs an example, consider the year 2006, where analyst 1047, employed at brokerage house 464, provided an estimated end-of-period EPS of 0.0929 (VALUE). However, the actual EPS for that year turned out to be 0.1014 (ACTUAL), resulting in a forecasting error of -0.0085. Consequently, in the subsequent year, 2007, the past_accuracy metric for analyst 1047 would reflect this error by taking the value of -0.0085 (VALUE-ACTUAL).\nThis action will create some missing values and this is perfectly fine.\nIf your code produces 144 NAs, then you are on the right track.\nNote that we are creating copies of the original dataset at each step to facilitate error detection in case any mistakes occur during the process."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-4",
    "href": "posts/final project/index.html#your-code-for-task-4",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Create copy\nNFLX3 &lt;- NFLX2\n\n# Calculate accuracy\nNFLX3 &lt;- NFLX3 %&gt;%\n  group_by(YEAR, ANALYS) %&gt;%\n  mutate(accuracy = VALUE - ACTUAL) %&gt;%\n  group_by(ANALYS) %&gt;%\n  arrange(YEAR) %&gt;%\n  mutate(past_accuracy = lag(accuracy))\n\n# Check NAs\nsum(is.na(NFLX3$past_accuracy))\n\n\n[1] 144\n\n\n\n\n\n\n\n\n\n\nTask 5: Forecast Horizon\n\n\n\n\nThe longer the forecast horizon, the higher the uncertainty associated with EPS forecasts. To control for this fact, create a new column in NFLX3 called horizon that captures the forecast horizon (ANNDATS_ACT- ANNDATS) for each analyst.\nWe anticipate observing a negative correlation between accuracy and horizon. Typically, as the forecast horizon increases, the accuracy tends to decrease, and vice versa. However, in our dataset, there is an exception where we find a positive correlation between accuracy and horizon for one specific year. Write an R code to identify and determine which year exhibits this positive correlation.\nNeed Written Response in this callout: Enter the year in here.\n2018-11-17 with a correlation value of 0.24300105"
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-5",
    "href": "posts/final project/index.html#your-code-for-task-5",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Task 5: Forecast Horizon\n# Calculate horizon\nNFLX3 &lt;- NFLX3 %&gt;% mutate(horizon = as.numeric(difftime(ANNDATS_ACT, ANNDATS, units = \"days\")))\n\n# Calculate correlation\ncorrelation_by_year &lt;- NFLX3 %&gt;% group_by(YEAR) %&gt;% summarise(correlation = cor(accuracy, horizon, use = \"complete.obs\"))\n\n# Convert YEAR\ncorrelation_by_year$YEAR &lt;- format(as.POSIXlt(correlation_by_year$YEAR, format = \"%Y\"), \"%Y-%m-%d %H:%M:%S\")\n\n# Find positive correlation\npositive_corr_year &lt;- correlation_by_year %&gt;% filter(correlation &gt; 0) %&gt;% arrange(desc(correlation))\n\n# Print positive correlation year and correlation value\nprint(paste(positive_corr_year$YEAR, positive_corr_year$correlation, sep = \" \"))\n\n\n[1] \"2018-12-06 00:00:00 0.243001051264513\" \n[2] \"2011-12-06 00:00:00 0.226647459261001\" \n[3] \"2012-12-06 00:00:00 0.0653612459718447\"\n[4] \"2015-12-06 00:00:00 0.0558201596685652\"\n[5] \"2013-12-06 00:00:00 0.0213974532265298\"\n\n\n\n\n\n\n\n\n\n\nTable 6: Experience\n\n\n\n\nWe assume that if an analyst is monitoring a company for a long period of time, he/she is expected to make more informed predictions. Create a new column in NFLX3 called experience that counts the cumulative number of years the analyst monitor (have predictions) the company. Print the summary of experience column.\nHint: Try to use cumsum() function in R.\nNeed Written Response in this callout: Which analyst (s) has the highest number of experience in NFLX3 dataset and for how long do they monitor the NFLX ticker?\n\nTwo unique analyst with the following identifiers 72088 and 77748 had an hardcore experience of 17 years observing the NTFLX stock and making predictions based on the data provided."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-6",
    "href": "posts/final project/index.html#your-code-for-task-6",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Task 6: Experience\n# Calculate cumulative experience\nNFLX3 &lt;- NFLX3 %&gt;%\n  group_by(ANALYS) %&gt;%\n  mutate(experience = cumsum(!duplicated(YEAR)))\n\n# Find analyst(s) with the highest experience\nmax_experience &lt;- NFLX3 %&gt;%\n  group_by(ANALYS) %&gt;%\n  summarise(experience = max(experience)) %&gt;%\n  filter(experience == max(experience)) %&gt;%\n  arrange(desc(experience))\n\n# Print summary of the experience column\nsummary(NFLX3$experience)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   2.000   3.000   4.192   6.000  17.000 \n\n\nCode\n# Print analyst(s) with the highest experience\nprint(max_experience)\n\n\n# A tibble: 2 × 2\n  ANALYS experience\n   &lt;int&gt;      &lt;int&gt;\n1  72088         17\n2  77748         17\n\n\nCode\n# Define custom color palette\ncustom_colors &lt;- c(\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\", \"#e5c494\", \"#b3b3b3\")\n\n# Visualization with custom colors\nggplot(data = max_experience, aes(x = reorder(ANALYS, -experience), y = experience, fill = reorder(ANALYS, -experience))) +\n  geom_bar(stat = \"identity\") +\n  labs(x = \"Analyst\", y = \"Cumulative Experience\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_manual(values = custom_colors)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 7: Size\n\n\n\n\nIf a brokerage house has multiple analysts providing predictions for the same company, it may indicate a greater allocation of resources for company analysis. To capture this, create a new column in the NFLX3 dataset called size that calculates the total count of unique analysts employed per year by each brokerage house (ESTIMATOR)\nNeed Written Response in this callout: Print the frequencies for size variable. What does this frequency table reveal about the distribution of the number of analysts hired by brokerage houses in this dataset?\n\nWe concluded that the number of analysts increase the frequency of hiring reduces exponentially. This indicates that with time the brokerage firm decided to hire an experience analyst per season to maximize productivity."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-7",
    "href": "posts/final project/index.html#your-code-for-task-7",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n # Task 7: Size\n# Calculate analysts per year\nNFLX3 &lt;- NFLX3 %&gt;%\n  group_by(YEAR, ESTIMATOR) %&gt;%\n  mutate(size = n_distinct(ANALYS))\n\n# Print frequencies\nsize_freq &lt;- table(NFLX3$size)\nprint(size_freq)\n\n\n\n  1   2   3 \n560  72   9 \n\n\nCode\n# Create frequency table\nsize_table &lt;- as.data.frame(size_freq)\ncolnames(size_table) &lt;- c(\"Analysts\", \"Frequency\")\n\n# Sort by frequency\nsize_table &lt;- size_table[order(-size_table$Frequency), ]\n\n# Print sorted table using kableExtra\nsize_table %&gt;%\n  kable(\"html\") %&gt;%\n  kable_styling(bootstrap_options = \"striped\", full_width = FALSE)\n\n\n\n\n\nAnalysts\nFrequency\n\n\n\n\n1\n560\n\n\n2\n72\n\n\n3\n9\n\n\n\n\n\n\n\nCode\n# Summary statistics\nsummary(NFLX3$size)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1.00    1.00    1.00    1.14    1.00    3.00 \n\n\nCode\n# Visualize results with different colors\nbarplot(size_table$Frequency, names.arg = size_table$Analysts,\n        xlab = \"Analysts\", ylab = \"Frequency\",\n        main = \"Analysts by Brokerage\",\n        col = c(\"skyblue\", \"salmon\", \"lightgreen\"), border = \"black\",\n        las = 1, cex.names = 0.8)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 8: Prediction 1\n\n\n\n\nIn the year 2020, NETFLIX reported an actual earnings per share (EPS) of $6.08. To predict this EPS value based on historical data, we will employ a linear regression model using the dataset NFLX3 up until the year 2019. In this model, the target variable will be ACTUAL and the predictor variables will include VALUE and past_accuracy. C.all your model as model1.\nNeed Written Response in this callout: Using the linear regression model ‘model1,’ which has been trained on historical data up to the year 2019, what is the forecasted EPS (Earnings Per Share) for the year 2020? Please provide a brief explanation of the method you employed to make this prediction. If you encountered any challenges or were unable to make the calculation, briefly describe the specific issues you encountered.\n\nUtilizing the linear regression model ‘model1’ trained on historical data until 2019, we can predict the Earnings Per Share (EPS) for 2020. The process involves assessing the model’s goodness of fit, measured by the R-squared value. If the R-squared value surpasses 0.5, indicating a strong fit, the code calculates the mean of the ‘past_accuracy’ variable. When the fit is satisfactory, the model generates a forecast for the future period. This involves creating a new dataset with appropriate values for independent variables (VALUE and past_accuracy) and utilizing the ‘predict’ function to estimate the EPS. Conversely, if the R-squared value falls below the threshold, a warning message alerts that the model might not accurately predict future EPS. Addressing specific challenges related to data configuration or model training is essential to ensure the forecast’s accuracy. This method enables accurate predictions under favorable model fit conditions, ensuring reliable forecasting outcomes."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-8",
    "href": "posts/final project/index.html#your-code-for-task-8",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Calculate mean past_accuracy\nmean_past_accuracy &lt;- mean(NFLX3$past_accuracy, na.rm = TRUE)\n\n\n# Create linear regression model\nmodel1 &lt;- lm(ACTUAL ~ VALUE + past_accuracy, data = NFLX3)\n\n# Get R-squared value\nr_squared &lt;- summary(model1)$r.squared\n\n# Check R-squared\nif (r_squared &gt; 0.5) {\n\n  # Create new data frame for future period\n  new_data_future &lt;- data.frame(\n    VALUE = 6.08,\n    past_accuracy = mean_past_accuracy\n  )\n\n  # Predict EPS for future\n  predicted_eps_future &lt;- predict(model1, newdata = new_data_future)\n\n  # Print forecasted EPS\n  cat(\"Forecasted EPS: $\", round(predicted_eps_future, 2))\n\n} else {\n\n  # Print warning\n  cat(\"Low R-squared value.\")\n\n}\n\n\nForecasted EPS: $ 6.3\n\n\nCode\n# Print mean past_accuracy\ncat(\"Mean past_accuracy: \", round(mean_past_accuracy, 2))\n\n\nMean past_accuracy:  -0.09\n\n\n\n\n\n\n\n\n\n\nTask 9: Prediction 2\n\n\n\n\nAs an alternative approach, instead of modeling the ‘ACTUAL’ value, we can obtain the mean and median forecasts for the year 2020 as our best estimates of the EPS value for that year.\nNeed Written Response in this callout: Please calculate these forecasts and then compare them with the results from the previous task. Finally, provide your insights and comments based on your findings.\n\nIn this alternative approach, we calculated both the mean and median forecasts for the year 2020 to estimate the EPS value. The mean forecast stood at approximately $1.24, whereas the median forecast was notably lower, around $0.41. Comparing these outcomes with the linear regression model used earlier, it becomes evident that the model-based forecast offers a more detailed and potentially accurate prediction. However, each method has its distinct advantages and disadvantages. The model-driven forecast considers historical relationships and variables like ‘past_accuracy,’ but its accuracy heavily depends on the quality of the model fit, indicated by the R-squared value. On the contrary, the mean and median forecasts provide straightforward summary statistics but might lack the predictive strength of a well-fitted model. The choice between these methods should be made considering the data quality and the specific context of the analysis."
  },
  {
    "objectID": "posts/final project/index.html#your-code-for-task-9",
    "href": "posts/final project/index.html#your-code-for-task-9",
    "title": "Mini Group Project 1",
    "section": "",
    "text": "Code\n# Calculate mean forecast\nmean_forecast &lt;- mean(NFLX3$VALUE, na.rm = TRUE)\n\n# Calculate median forecast\nmedian_forecast &lt;- median(NFLX3$VALUE, na.rm = TRUE)\n\n# Print forecasts\ncat(\"Mean forecast: $\", round(mean_forecast, 2))\n\n\nMean forecast: $ 1.24\n\n\nCode\ncat(\"Median forecast: $\", round(median_forecast, 2))\n\n\nMedian forecast: $ 0.41\n\n\n\n\n\n\n\n\n\n\nTask 10: Averages\n\n\n\n\nGenerate a new dataset named NFLX4 by aggregating data from NFLX3 Include the variables size, experience, horizon, accuracy, past_accuracy, and ACTUAL in NFLX4. When calculating the yearly averages for these variables, ignore any missing values (NAs). Present a summary of the NFLX4 dataset.\nNeed Written Response in this callout: Subsequently, employ correlation analysis or exploratory data analysis to get insights into the relationships between these variables and ‘ACTUAL,’ if such relationships exist.\n\nFollowing an in-depth analysis of the NFLX4 dataset, significant patterns concerning the relationship between variables and 'ACTUAL' earnings per share have been uncovered. The correlation analysis indicated that 'ACTUAL' is positively linked with 'size' (0.18) and 'experience' (0.69), implying that larger and more experienced analyst groups tend to deliver more precise forecasts for 'ACTUAL'. Conversely, 'ACTUAL' exhibits negative correlations with 'horizon' (-0.63) and 'past_accuracy' (-0.80), indicating that analysts with longer forecasting periods and higher past accuracy often produce less accurate predictions for 'ACTUAL'. Visual representations through scatter plots reinforce these findings, such as the trend showing enhanced accuracy with an increase in the number of analysts in the 'ACTUAL' versus 'size' plot. These insights shed light on the factors influencing earnings per share forecasts, underscoring the importance of analyst group size and experience while emphasizing the potential drawbacks of longer forecasting horizons and overly accurate track records, crucial knowledge for financial analysts, investors, and decision-makers.\n\n\n\n\nCode\n# Aggregate and calculate averages\nNFLX4 &lt;- NFLX3 %&gt;%\n  group_by(YEAR) %&gt;%\n  summarise(\n    size = mean(size, na.rm = TRUE),\n    experience = mean(experience, na.rm = TRUE),\n    horizon = mean(horizon, na.rm = TRUE),\n    accuracy = mean(accuracy, na.rm = TRUE),\n    past_accuracy = mean(past_accuracy, na.rm = TRUE),\n    ACTUAL = mean(ACTUAL, na.rm = TRUE)\n  )\n\n# Summary of NFLX4 dataset\nsummary(NFLX4)\n\n\n     YEAR                size         experience       horizon       \n Length:19          Min.   :1.000   Min.   :1.000   Min.   :0.06284  \n Class :character   1st Qu.:1.074   1st Qu.:2.664   1st Qu.:0.08547  \n Mode  :character   Median :1.105   Median :3.400   Median :0.09289  \n                    Mean   :1.132   Mean   :3.611   Mean   :0.09004  \n                    3rd Qu.:1.202   3rd Qu.:4.869   3rd Qu.:0.09512  \n                    Max.   :1.300   Max.   :6.061   Max.   :0.10656  \n                                                                     \n    accuracy         past_accuracy           ACTUAL       \n Min.   :-0.822085   Min.   :-0.798219   Min.   :-0.0050  \n 1st Qu.:-0.019087   1st Qu.:-0.028736   1st Qu.: 0.0914  \n Median :-0.015035   Median :-0.013423   Median : 0.2643  \n Mean   :-0.048310   Mean   :-0.060652   Mean   : 0.9248  \n 3rd Qu.:-0.005415   3rd Qu.:-0.009260   3rd Qu.: 0.5678  \n Max.   : 0.121449   Max.   :-0.001547   Max.   : 6.0800  \n                     NA's   :1                            \n\n\nCode\n# Create a correlation matrix\ncorrelation_matrix &lt;- cor(NFLX4[, c(\"size\", \"experience\", \"horizon\", \"accuracy\", \"past_accuracy\", \"ACTUAL\")], use = \"complete.obs\")\n\n\n# Custom color palette\ncolor_palette &lt;- colorRampPalette(c(\"#FFFFFF\", \"#67a9cf\", \"#ef8a62\", \"#b2182b\"))(100)\n\n# Create a correlation plot with enhanced customization\ncorrplot(\n  correlation_matrix,\n  method = \"color\",\n  col = color_palette,\n  type = \"upper\",\n  order = \"original\",\n  tl.cex = 0.7,  # Adjust the size of text labels\n  cl.cex = 0.8,  # Adjust the size of correlation coefficients\n  diag = FALSE,\n  number.cex = 0.8\n)\n\n\n\n\n\nCode\n# Print correlation matrix\nprint(correlation_matrix)\n\n\n                     size  experience    horizon    accuracy past_accuracy\nsize           1.00000000  0.07451284 -0.1317823 -0.04537307    -0.1810330\nexperience     0.07451284  1.00000000 -0.4844637 -0.25882136    -0.4620906\nhorizon       -0.13178225 -0.48446371  1.0000000  0.22264895     0.4979377\naccuracy      -0.04537307 -0.25882136  0.2226489  1.00000000    -0.1604379\npast_accuracy -0.18103301 -0.46209061  0.4979377 -0.16043792     1.0000000\nACTUAL         0.18223220  0.68707354 -0.6346966 -0.31928984    -0.7958850\n                  ACTUAL\nsize           0.1822322\nexperience     0.6870735\nhorizon       -0.6346966\naccuracy      -0.3192898\npast_accuracy -0.7958850\nACTUAL         1.0000000\n\n\nCode\nggpairs(NFLX4, columns = c(\"size\", \"experience\", \"horizon\", \"accuracy\", \"past_accuracy\", \"ACTUAL\"))\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoving 1 row that contained a missing value\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoving 1 row that contained a missing value\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoving 1 row that contained a missing value\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoving 1 row that contained a missing value\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_point()`).\nRemoved 1 rows containing missing values (`geom_point()`).\n\n\nWarning: Removed 1 rows containing non-finite values (`stat_density()`).\n\n\nWarning in ggally_statistic(data = data, mapping = mapping, na.rm = na.rm, :\nRemoving 1 row that contained a missing value\n\n\nWarning: Removed 1 rows containing missing values (`geom_point()`).\n\n\n\n\n\nCode\nggplot(NFLX4, aes(x = size)) +\n  geom_histogram(fill = \"#009999\", color = \"black\", bins = 20) +\n  ggtitle(\"Distribution of Size\") +\n  xlab(\"Size\") +\n  ylab(\"Frequency\") +\n  theme_minimal()\n\n\n\n\n\nCode\nggplot(NFLX4, aes(y = size)) +\n  geom_boxplot(fill = \"#009999\") +\n  ggtitle(\"Boxplot of Size\") +\n  ylab(\"Size\") +\n  theme_minimal()"
  }
]